;+
; NAME:
;  pamgen
; PURPOSE:   (one line only)
;  Compute a pixel-area map for an astronomical image
; DESCRIPTION:
;  This program will combine information from an image and its astrometric
;     solution to create an image that contains the area of each pixel
;     on the plane-of-the-sky in units of arcsec^2.
; CATEGORY:
;  CCD data processing
; CALLING SEQUENCE:
;  pamgen,root,num
; INPUTS:
;  root - root of file name
;  num  - Image number, file name will be root + '.' + num where num is
;            formatted as a 3-digit zero-padded string.  If num is undefined
;            then root is taken to be the entire file name.  A string is allowed
;            and will be parsed by rangepar.pro to pull out a list of image
;            numbers.
;    You can provide either one or a group of images.  If num is undefined
;       then root can either be scalar or vector.  If num is defined then
;       root must be scalar.  If num is defined it can be either a scalar or
;       vector if it is an integer.  If it is a string it can only be a scalar.
; OPTIONAL INPUT PARAMETERS:
; KEYWORD INPUT PARAMETERS:
;  PATH - String, name of directory where image data are to be found.
;            Default is '/net/frakir/raid/reduced/'.  'root' is added on
;            to this path to form the complete directory name.  If you
;            supply the path yourself you must completely specify the path.
; OUTPUTS:
; KEYWORD OUTPUT PARAMETERS:
; COMMON BLOCKS:
; SIDE EFFECTS:
; RESTRICTIONS:
; PROCEDURE:
;  A file, named fitcoeff.dat, must be in PATH.  This file
;    is expected to contain a fit that allows mapping from pixel (x,y) to
;    sky (RA,Dec).  This file is usually generated by running ASTROM.PRO.
;
;  For each file specified
; MODIFICATION HISTORY:
;  Written by Marc W. Buie, Southwest Research Institute, 2009/10/02
;  2009/12/30, MWB, modified for new fitting coefficients methodology
;-
pro pamgen,root,in_num,PATH=in_path

   self='pamgen: '
   if badpar(root,7,[0,1],caller=self+'(root) ', $
                          npts=numroot) then return
   if badpar(in_num,[0,2,3,7],[0,1],caller=self+'(num) ', $
                                    npts=numnum,type=numtype) then return
   if badpar(path,[0,7],0,caller=self+'(DDIR) ', $
         default='/net/frakir/raid/reduced/'+addslash(root)) then return

   ; First, regularize the input
   path = addslash(path)

   if not exists(path+'fitcoeff.dat') then begin
      print,'Astrometry reduction (fitcoeff.dat) not found, quitting.'
      return
   endif
   rdastfc,path+'fitcoeff.dat',ffn,ftype,xc,yc,prot,renorm,cra,cdec, $
      photzp,terms,coeffarr,ncoeffs,nlines

   if numtype eq 7 then begin
      rangepar,in_num,fnolist
   endif else begin
      fnolist = in_num
   endelse

   for ii=0,n_elements(fnolist)-1 do begin

      file=root+'.'+string(fnolist[ii],format='(i3.3)')

      z=where(strmid(ffn,0,10) eq file,count)

      for ext=1,8 do begin
         fullfile = file+'x'+strn(ext)
         z=trimrank(where(ffn eq fullfile and ftype eq 'eta',count))
         xcref = xc[z]
         ycref = yc[z]
         racen = cra[z]
         deccen = cdec[z]
         ceta = trimrank(coeffarr[z,*])
         z=trimrank(where(ffn eq fullfile and ftype eq 'xi',count))
         cxi = trimrank(coeffarr[z,*])
         if renorm[z] le 0 then begin
            nx = 1024.0
            ny = 2048.0
            renormfac = sqrt(nx^2 + ny^2)
         endif else begin
            renormfac = renorm[z]
         endelse
         
         info = { $
            cxi: cxi, $
            ceta: ceta, $
            terms: terms, $
            xcref: xcref, $
            ycref: ycref, $
            prot: prot[z]/!radeg, $
            renormfac: renormfac, $
            raref: racen, $
            decref: deccen $
            }

         print,'Generating PAM for ',fullfile
         area = fltarr(nx,ny)
         for x0=0.0,nx-1 do begin
            for y0=0.0,ny-1 do begin
               astxy2rd,x0,y0,info,ra0,dec0,/full
               xp = [-0.5, 0.0, 0.5, 0.5, 0.5,0.0,-0.5, -0.5, -0.5]+x0
               yp = [-0.5,-0.5,-0.5, 0.0, 0.5,0.5, 0.5,  0.0, -0.5]+y0
               astxy2rd,xp,yp,info,ra,dec,/full
               ; offsets from pixel center in arcsec
               dra = (ra-ra0)*cos(dec0) * !radeg * 3600.0
               ddec = (dec-dec0) * !radeg * 3600.0
               np=n_elements(xp)
               area[x0,y0]=total( (dra[1:np-1]-dra[0:np-2]) * $
                                   0.5*(ddec[1:np-1]+ddec[0:np-2]) )
            endfor
         endfor

         outfile = fullfile+'.pam'
         print,'Write ',outfile
         writefits,outfile,area

      endfor

   endfor

end
