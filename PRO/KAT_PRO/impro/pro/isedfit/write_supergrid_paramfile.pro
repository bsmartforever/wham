;+
; NAME:
;   WRITE_SUPERGRID_PARAMFILE()
;
; PURPOSE:
;   Initialize the supergrid parameter file for iSEDfit.
;
; INPUTS: 
;   supergrid_paramfile - output parameter file name (e.g.,
;     PREFIX+'_supergrid.par')
;   supergrid - supergrid number (e.g., 1) [NSUPER]
;
; OPTIONAL INPUTS: 
;   sfhgrid - SFHgrid number (see WRITE_SFHGRID_PARAMFILE)
;     corresponding to each SUPERGRID [NSUPER]
;   imf - scalar or NSUPER-element array indicating the IMF to use for
;     each supergrid (default 'chab')
;   synthmodels - scalar or NSUPER-element array indicating the
;     population synthesis models to use for each supergrid (default
;     'fsps') 
;   redcurve - scalar or NSUPER-element array indicating the reddening
;     curve to use for each supergrid (default 1); the current options
;     are:  
;       -1 = none
;        0 = Calzetti 2000 
;        1 = Charlot & Fall 2000
;        2 = O'Donnell 1994 (i.e., standard Milky Way)
;        3 = SMC
;
; KEYWORD PARAMETERS:
;   clobber - overwrite any existing parameter file
; 
; OUTPUTS: 
;   This code writes a parameter file called SUPERGRID_PARAMFILE.par 
; 
; COMMENTS:
;
; MODIFICATION HISTORY:
;   J. Moustakas, 2013 Jan 12, Siena
;
; Copyright (C) 2013, John Moustakas
; 
; This program is free software; you can redistribute it and/or modify 
; it under the terms of the GNU General Public License as published by 
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version. 
; 
; This program is distributed in the hope that it will be useful, but 
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details. 
;-

function init_supergrid, nsuper
; assign default no-burst parameters
    params = {$
      supergrid:         1L,$
      sfhgrid:           1L,$
      imf:           'chab',$
      synthmodels:   'fsps',$
      redcurve:           1} ; Charlot & Fall
return, replicate(params,nsuper)
end    

pro write_supergrid_paramfile, supergrid_paramfile, supergrid=supergrid, $
  sfhgrid=sfhgrid, imf=imf, synthmodels=synthmodels, redcurve=redcurve, $
  clobber=clobber

    nsuper = n_elements(supergrid)
    if n_elements(supergrid_paramfile) eq 0 or nsuper eq 0 then begin
       doc_library, 'write_supergrid_paramfile'
       return
    endif
    
; initialize and fill the parameter structure
    params = init_supergrid(nsuper)
    params.supergrid = supergrid

    uu = uniq(params.supergrid,sort(params.supergrid))
    if n_elements(uu) ne n_elements(params) then message, $
      'SUPERGRID numbers must be unique'

    nsfhgrid = n_elements(sfhgrid)
    if nsfhgrid ne 0 then begin
       if nsfhgrid ne 1 and nsfhgrid ne nsuper then message, 'SFHGRID must '+$
         'be a scalar or match the number of elements in SUPERGRID'
       params.sfhgrid = sfhgrid
    endif
    
    nimf = n_elements(imf)
    if nimf ne 0 then begin
       if nimf ne 1 and nimf ne nsuper then message, 'IMF must '+$
         'be a scalar or match the number of elements in SUPERGRID'
       params.imf = imf
    endif
    
    nsynthmodels = n_elements(synthmodels)
    if nsynthmodels ne 0 then begin
       if nsynthmodels ne 1 and nsynthmodels ne nsuper then message, 'SYNTHMODELS must '+$
         'be a scalar or match the number of elements in SUPERGRID'
       params.synthmodels = synthmodels
    endif
    
    nredcurve = n_elements(redcurve)
    if nredcurve ne 0 then begin
       if nredcurve ne 1 and nredcurve ne nsuper then message, 'REDCURVE must '+$
         'be a scalar or match the number of elements in SUPERGRID'
       params.redcurve = redcurve
    endif
    
; write out
    if im_file_test(supergrid_paramfile,clobber=clobber) then return

    hdr = [['# iSEDfit SUPERGRID parameters'],$
      ['# Generated by WRITE_SUPERGRID_PARAMFILE on '+im_today()]]
    splog, 'Writing '+supergrid_paramfile
    yanny_write, supergrid_paramfile, ptr_new(params), $
      stnames='SUPERGRIDPARAMS', /align, hdr=hdr

return
end
