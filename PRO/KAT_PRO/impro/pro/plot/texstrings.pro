function texstrings
;+
; NAME:
;	TEXSTRINGS
;
; PURPOSE:
;	Returns a structure of string fields containing simplified
;	names of the Tex to IDL strings generated by TEXTOIDL.
;
; OUTPUTS:
;	s : a structure as described above
;
; RESTRICTIONS:
;	Make sure you have the most recent version of TEXTOIDL with
;	all the bugs fixed by D. Finkbeiner!
;
; COMMENTS:
;	Try:
;		s = texstrings()
;	then:
;		help, s, /structure
;
; EXAMPLE:
;	Imagine wanting to generate a plot whose x-axis has the units
;	of frequency times the differential frequency.  Normally, the
;	lable for the x-title would look like this: 
;
;		plot, x, y, xtitle=textoidl('\nu')+'d'+textoidl('\nu')
;
;	This routine simplifies the above convention by creating short
;	string names for each of the possible TEXTOIDL outputs.  After
;	returning the structure this program creates, the above
;	example would become:
;
;		plot, x, y, xtitle=s.nu+'d'+s.nu
;
;	Note: the structure field name for capital Greek letters
;	are simply preceeded by the letter 'c' to distinguish them
;	from the lowercase letters.
;    
; PROCEDURES USED:
;	TEXTOIDL() and associated routines, ANGSTROM(), SUNSYMBOL()
;
; MODIFICATION HISTORY:
;	John Moustakas, 2000 September 15, U of A
;-

    s = {angstrom:   string(angstrom()),              $
         sun:	     string(sunsymbol()),             $
         alpha:      string(textoidl('\alpha')),      $
         beta:       string(textoidl('\beta')),       $
         gamma:      string(textoidl('\gamma')),      $
         delta:      string(textoidl('\delta')),      $
         epsilon:    string(textoidl('\epsilon')),    $
         zeta:       string(textoidl('\zeta')),       $
         eta:        string(textoidl('\eta')),        $
         theta:      string(textoidl('\theta')),      $
         iota:       string(textoidl('\iota')),       $
         kappa:      string(textoidl('\kappa')),      $
         lambda:     string(textoidl('\lambda')),     $
         mu:         string(textoidl('\mu')),         $
         nu:         string(textoidl('\nu')),         $
         xi:         string(textoidl('\xi')),         $
         pi:         string(textoidl('\pi')),         $
         rho:        string(textoidl('\rho')),        $
         sigma:      string(textoidl('\sigma')),      $
         tau:        string(textoidl('\tau')),        $
         upsilon:    string(textoidl('\upsilon')),    $
         phi:        string(textoidl('\phi')),        $ 
         chi:        string(textoidl('\chi')),        $
         psi:        string(textoidl('\psi')),        $
         omega:      string(textoidl('\omega')),      $
         varpi:      string(textoidl('\varpi')),      $
         varepsilon: string(textoidl('\varepsilon')), $
         varphi:     string(textoidl('\varphi')),     $
         vartheta:   string(textoidl('\vartheta')),   $
         cgamma:     string(textoidl('\Gamma')),   $
         cdelta:     string(textoidl('\Delta')),   $
         ctheta:     string(textoidl('\Theta')),   $
         clambda:    string(textoidl('\Lambda')),   $
         cxi:        string(textoidl('\Xi')),   $
         cpi:        string(textoidl('\Pi')),   $
         csigma:     string(textoidl('\Sigma')),   $
         supsilon:   string(textoidl('\Upsilon')),   $
         cphi:       string(textoidl('\Phi')),   $
         comega:     string(textoidl('\Omega')),   $
         aleph:      string(textoidl('\aleph')),   $
         ast:        string(textoidl('\ast')),   $
         cap:        string(textoidl('\cap')),   $
         cdot:       string(textoidl('\cdot')),   $
         cup:        string(textoidl('\cup')),   $
         exists:     string(textoidl('\exists')),   $
         infty:      string(textoidl('\infty')),   $
         in:         string(textoidl('\in')),   $
         equiv:      string(textoidl('\equiv')),   $
         pm:         string(textoidl('\pm')),   $
         div:        string(textoidl('\div')),   $
         subset:     string(textoidl('\subset')),   $
         superset:   string(textoidl('\superset')),   $
         leftarrow:  string(textoidl('\leftarrow')),   $
         downarrow:  string(textoidl('\downarrow')),   $
         rightarrow: string(textoidl('\rightarrow')),   $
         uparrow:    string(textoidl('\uparrow')),   $
         neq:        string(textoidl('\neq')),   $
         propto:     string(textoidl('\propto')),   $
         sim:        string(textoidl('\sim')),   $
         partial:    string(textoidl('\partial')),   $
         nabla:      string(textoidl('\nabla')),   $
         angle:      string(textoidl('\angle')),   $
         times:      string(textoidl('\times')),   $
         geq:        string(textoidl('\geq')),   $
         leq:        string(textoidl('\leq')),   $
         arcmin:     string(textoidl("\'")),   $
         prime:      string(textoidl('\prime')),   $
         circ:       string(textoidl('\circ'))}

return, s
end
